class MinStack {
public:

   //main stack
	 stack<long long> st;

//min to store min ele
    long long min;

    MinStack() {
        
    }
    
    void push(long long val) {
        
        if(st.empty()) // if stack empty then push and make min as val
        {
            st.push(val);
            min = val;
        }

        else if(val<min)
        {
            min=val;
		st.push(2*val*1LL-min); //if val is less than min then update min and push dummy val in stack
            
        }
        else
        {
            st.push(val); //if val>= min then push it in stack
        }

    }
    
    void pop() { 

        if(st.empty())
        {
            return;
        }

        else if(st.top()<min) //if stack top is less than min it means top val is dummy val , so update min to pre min by formula and then pop the top from stack
        {
            min=2*min-st.top();
        }

        st.pop(); 
        
    }
    
    int top() {

        if(st.empty())
        {
            return -1;
        }

        else if(st.top()>min) // if greater than min then return top 
        {
            return st.top(); 
        }
        else // if top is less than min then its dummy val , so original val of top is in min so return min
        {
            return min;
        }
    }
    
    int getMin() {
        if(st.empty())
        {
            return -1;
        }
        return min;
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */