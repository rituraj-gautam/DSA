/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int height(TreeNode* root,int &diameter)
    {
        if(root == NULL)
        {
            return 0;
        }

        //take lh and rh as 0
        int lh=0; 
        int rh=0;







        //calc lh and rh
        if(root->left != NULL)
        lh = height(root->left, diameter);

        if(root->right != NULL)
        rh = height(root->right, diameter);







        
        //calc diameter as max of its prev value and lh+rh
        diameter = max(diameter,lh+rh);



        //return height 
        return max(lh,rh)+1;
    }

    int diameterOfBinaryTree(TreeNode* root) {
        
        int diameter = 0; //initialize diameter
        height(root,diameter); //gets diameter from height function
        return diameter; //returns the diameter
    }
};