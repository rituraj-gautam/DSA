/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {

        //ans vector
        vector<int>ans;

        //if binary tree is empty return the empty vector 
        if(root == NULL)
        return ans;

        //additional stack
        stack<TreeNode*> st;
        //push the 1st ele or root in stack
        st.push(root);

        //run till stack is not empty
        while(!st.empty())
        {
            TreeNode* topele = st.top(); //take the top ele
            ans.push_back(topele->val); //push its val in ans
            st.pop(); //pop it from stack

            if(topele->right != NULL) //if right child exists push it in stack
            {
                st.push(topele->right);
            }
            if(topele->left != NULL) //if left child exists push it in stack
            {
                st.push(topele->left);
            }
        }

        return ans;
    }
};