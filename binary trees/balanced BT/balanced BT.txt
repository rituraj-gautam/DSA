/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        return check(root) != -1; //will return true if value is not -1
    }

    int check(TreeNode* root)
    {
        if(root == NULL)
        {
            return 0;
        }

        //run recursion for left height 
        int lh = check(root->left);
        //if lh is returning -1 then not balanced so return -1
        if(lh == -1) return -1;

        //same for rh 
        int rh = check(root->right);
        if(rh == -1) return -1;

        //if lh and rh returned something else, check condition of balanced B.T. fulfilled or not, if not returned -1
        if(abs(lh-rh)>1)
        {
            return -1;
        }

        //reached here means balanced binary tree, return the height
        return max(lh,rh)+1;
    }
};