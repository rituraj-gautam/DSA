/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
private:
    void add(Node* &head, Node* &tail, int val)
    {
        Node* temp = new Node(val);
        if(head == NULL)
        {
            head = temp;
            tail = temp;
            return;
        }

        tail->next = temp;
        tail = tail->next;


    }


public:
    Node* copyRandomList(Node* head) {

        Node* temp = head;
        Node* clonetail = NULL;
        Node* clonehead = NULL;

       
        //clone LL with next pointer and without random ptr
        while(temp!=NULL)
        {
            add(clonehead, clonetail, temp->val);
            temp = temp->next;
        }


        //place clone nodes in middle of original nodes
        Node* curr1 = head;
        Node* curr2 = clonehead;
        Node* next = NULL;

        while(curr1 != NULL)
        {
            next = curr1->next;
            curr1->next = curr2;
            curr1 = next;
            
            next = curr2->next;
            curr2->next = curr1;
            curr2 = next;

        }
        
        //copy random ptrs
        curr1 = head;
        curr2 = clonehead;
        next = NULL;

        while(curr1 != NULL)
        {

            if(curr1->random != NULL)
            {
                curr1->next->random = curr1->random->next;
                
            }

            else
            {
                curr1->next->random = NULL;
            }

            curr1 = curr1->next->next;
        }


        //separate cloneheads and heads
        curr1 = head;
        curr2 = clonehead;
        next = NULL;

        while(curr1 != NULL)
        {
            
            curr1->next = curr2->next;
            curr1 = curr1->next;
            
            if(curr1 != NULL)
            {
                curr2->next = curr1->next;
            }

            
            curr2 = curr2->next;

        }        

        
        return clonehead;
    }
};