/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private:

    void add(ListNode* &head, ListNode* &tail, int dig)
    {
        ListNode* temp = new ListNode(dig);

        if(head == NULL)
        {
            head = temp;
            tail = temp;
            return;
        }
        else
        {
        tail->next = temp;
        tail = temp;

        }
        
    }

public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        



        int carry = 0;

        ListNode* anshead = NULL;
        ListNode* anstail = NULL;


        //run the loop if l1 or l2 has any elements left or carry is left
        while(l1 != NULL || l2 != NULL || carry !=0)
        {
            //int dig1 as 0 so if l1 is finished then dig1 will be 0
            int dig1 = 0;
            if(l1 != NULL)
            {
                dig1 = l1->val;
            }

            //same
            int dig2 = 0;
            if(l2 != NULL)
            {
                dig2 = l2->val;
            }

            //sum it and take the digit to add to anstail and store the carry to use it in next addition
            int sum = dig1 + dig2 + carry;
            int dig = sum%10;
            carry = sum/10;

            add(anshead, anstail, dig);

            //if elements left in l1 or l2 then move one step
            if(l1 != NULL)
            {
                l1 = l1->next;   
            }

            if(l2 != NULL)
            {
                l2 = l2->next;   
            }
            

        }
        
        // this case is already covered in while loop as if l1 nad l2 both empty still while loop executes as carry is not 0 and so sum will be 0+0+caary and so carry will be added to anshead
        // if(carry != 0)
        // {
        //     add(anshead,anstail,carry);
        // }

        return anshead;
    }
};